OnTranslate
{
	_talk = reference0
	
	//This is what makes %(embedded_elements) work in script input
	if reference1 == "" && reference2 == "" //If this is from the input box
	{ //send input box : no event (ref2) , no special flag (ref1)
		_talk = EVAL('"' + REPLACE(_talk,'"','""') + '"')
	}
	
	//If you want to add anything to OnTranslate, like text replacement, I would put it after this point, generally. Just make sure it's before the TOSTR(_talk)
	
	//Once you autopause you can never go back... and that means i write this from scratch, again and again...
	if "\![no-autopause]" !_in_ _talk
	{
		_talk = REPLACE(_talk,"...? ",".\w4.\w4.\w4?\w8\w8 ")
		_talk = REPLACE(_talk,"...! ",".\w4.\w4.\w4!\w8\w8 ")
		_talk = REPLACE(_talk,"... ",".\w4.\w4.\w8\w8 ")
		_talk = REPLACE(_talk,". ",".\w8\w8 ")
		_talk = REPLACE(_talk,", ",",\w4 ")
		_talk = REPLACE(_talk,"! ","!\w8\w8 ")
		_talk = REPLACE(_talk,"? ","?\w8\w8 ")
		_talk = REPLACE(_talk,"— ","—\w8\w8 ")
		//_talk = REPLACE(_talk,". ",".\w8\w8 ")
		_talk = REPLACE(_talk,"\n\n[half] ","\n\n[half]\w8\w8")
		_talk = REPLACE(_talk,"\n\n ","\n\n\w8\w8")
	}
	//Simple autopause blocker per-character
	_talk = REPLACE(_talk,"##","")
	
	if SHIORI3FW.BalloonName == "Angelbox (Biblically Accurate)"
	{
		_balloonnum = CurrentAngelbox[0]
		_talk = REPLACE(_talk,"\0\b[0]","\0\b[%(_balloonnum)0]")
		_talk = REPLACE(_talk,"\0\b[2]","\0\b[%(_balloonnum)2]")
		_talk = REPLACE(_talk,"\0\b[4]","\0\b[%(_balloonnum)4]")
		_talk = REPLACE(_talk,"\0\b[6]","\0\b[%(_balloonnum)6]")
		_talk = REPLACE(_talk,"--INPUT_BALLOON","--balloon=%(_balloonnum)0")
	}
	else
	{
		_talk = REPLACE(_talk,"--INPUT_BALLOON","")
	}
	
	TOSTR(_talk)
}

//This is just here so you can use anchors to link to websites if you want. You can link to websites with normal menu choice tags! If you do, a handy URL preview will show up in the balloon!
OnAnchorSelect
{
	if "http://" _in_ reference0 || "https://" _in_ reference0; "\j[""%(reference0)""]"
}

//Hotkeys
OnKeyPress
{
	if reference0 == "f1"; "\![open,readme]"
	elseif reference0 == "t"; OnAiTalk
	elseif reference0 == "r"; OnLastTalk
}

//Happens about 30 seconds after a script ends, by default, to bring them back to normal poses
OnSurfaceRestore
{
	"\1\s[-1]\0\s[0]\![set,alpha,100]\![set,scaling,100,100]"
}

//Happens when the ghost is unminimized. You *can* include dialogue, but you don't *have* to. I have included this event because if you don't, it defaults to \0\s[0]\1\s[10], which you don't want in some cases, such as if your ghost uses different surfaces or has a different number of characters.
OnWindowStateRestore
{
	OnSurfaceRestore
}

On_homeurl
{
	""
}

shrink : all
{
	for _i = 100; _i > 50; _i--
	{
		"\![set,scaling,%(_i),%(_i)]\_w[20]"
	}
	"\![set,scaling,50,50]"
}

grow : all
{
	for _i = 50; _i < 100; _i++
	{
		"\![set,scaling,%(_i),%(_i)]\_w[20]"
	}
	"\![set,scaling,100,100]"
}

fadein : all
{
	for _i = 0; _i < 100; _i++
	{
		"\![set,alpha,%(_i)]\_w[20]"
	}
	"\![set,alpha,100]"
}

fadeinlong : all
{
	for _i = 0; _i < 100; _i++
	{
		"\![set,alpha,%(_i)]\_w[40]"
	}
	"\![set,alpha,100]"
}

fadeintext : all
{
    _text = _argv[0]
    _len = STRLEN(_text)
    _place = 0
    "\![quicksection,true]"
    for _i = 0; _i < 100; _i++
    {
        "\![set,alpha,%(_i)]"
        if _i % 10 == 0 && _place < _len
        {
            SUBSTR(_text,_place,1)
            _place++
        }
        "\_w[20]"
    }
    "\![set,alpha,100]"
    while _place < _len
    {
        SUBSTR(_text,_place,1)
        "\_w[100]"
        _place++
    }
     "\![quicksection,false]"
}

fadeout : all
{
	for _i = 100; _i > 0; _i--
	{
		"\![set,alpha,%(_i)]\_w[20]"
	}
	"\![set,alpha,0]"
}

fadeoutlong : all
{
	for _i = 100; _i > 0; _i--
	{
		"\![set,alpha,%(_i)]\_w[40]"
	}
	"\![set,alpha,0]"
}

newline
{
	"\n \n[-100]"
}

br
{
	if SHIORI3FW.BalloonName == "Effortless Iridescence"; "\n"
	else; " "
}

UniverseReady
{
	ARRAYSIZE(QuestionsToAsk) <= 0
}

username
{
	if nickname != ""; nickname
	else; SHIORI3FW.UserNameFull
}

OnNotifyDressupInfo
{
	IsFloating = 0
	MovingSparklies = 0
	foreach reference; _ref
	{
		if _ref[1,C_BYTE1] == "Floating" && _ref[2,C_BYTE1] == "On/Off" && _ref[4,C_BYTE1] == "1"; IsFloating = 1
		if _ref[1,C_BYTE1] == "Sparkles" && _ref[2,C_BYTE1] == "Moving" && _ref[4,C_BYTE1] == "1"; MovingSparklies = 1
	}
}

//Picking the choices now so that they don't overlap later...
OnPickChoices
{
	_done = 0
	while !_done
	{
		_animal_num = 12
		for _i = 0; _i < _animal_num; _i++
		{
			Choices.Animal[_i] = animals
		}
		if ARRAYSIZE(ARRAYDEDUP(Choices.Animal)) == _animal_num; _done = 1
	}
	
	_done = 0
	while !_done
	{
		QuestionsToAsk = IARRAY
		QuestionsToAsk ,= ANY(LoreQuestions)
		QuestionsToAsk ,= ANY(GuaranteedQuestions)
		QuestionsToAsk ,= ANY(OtherQuestions)
		QuestionsToAsk ,= ANY(OtherQuestions)
		QuestionsToAsk ,= ANY(OtherQuestions)
		
		if ARRAYSIZE(ARRAYDEDUP(QuestionsToAsk)) == ARRAYSIZE(QuestionsToAsk); _done = 1
	}
}

CheckChoices
{
	_find = _argv[0]
	_array = _argv[1,_argc - 1]
	
	for _i = 0; _i < ARRAYSIZE(LastAnswers); _i++
	{
		_element = LastAnswers[_i]
		if _find _in_ _element; {_i; return}
	}
	-1
}

Capitalize
{
	_let = TOUPPER(SUBSTR(_argv[0],0,1))
	_otherlets = SUBSTR(_argv[0],1,STRLEN(_argv[0]) - 1)
	"%(_let)%(_otherlets)"
}

Choices : all
{
	"\n\n\_q\![set,choicetimeout,60000]"
	if _argc == 4
	{
		"\![*]\__q[OnQuestions,""%(_argv[1])""]%(_argv[0])\__q"
		"%(newline)\f[align,right]"
		"\![*]\__q[OnQuestions,""%(_argv[3])""]%(_argv[2])\__q"
	}
	else
	{
		for _i = 0; _i < _argc; _i += 2
		{
			"\![*]\__q[OnQuestions,""%(_argv[_i + 1])""]%(_argv[_i])\__q\n"
		}
	}
}

On_getaistateex : all
{
	if reference0 == 0
	{
		"%(ARRAYSIZE(ChatterTalk)),%(ARRAYSIZE(MonologueTalk)),%(ARRAYSIZE(GuaranteedQuestions)),%(ARRAYSIZE(NotGuaranteedQuestions)),%(ARRAYSIZE(LoreQuestions))"
		C_BYTE1
		"Chatter,Monologue,GuaranteedQ's,NotGuaranteedQ's,LoreQ's"
	}
}

//—————————————————————————————— Right click menu links ——————————————————————————————

//Takes an array of alternating names and urls, and formats them for use with the right click menu
FormatLinks : all
{
	for _i = 0; _i < ARRAYSIZE(_argv); _i++
	{
		_argv[_i] //Add the link/title
		//Alternate between adding %ASC(1) or %ASC(2)
		if _i % 2 == 1; "%ASC(2)"
		else; "%ASC(1)"
	}
}

On_sakura.recommendsites
{
	FormatLinks(recommendsites_sakura)
}

//These are the websites linked in the top option of the sakura's right click menu. The format is simple; write the label of the link on the left followed by a semicolon, and then on the right, the url to link to. These should be separate strings.
recommendsites_sakura : array
{
	"Galla";						"https://gallathegalla.github.io/gtg-ghosts/"
	"Zichqec";						"https://ukagaka.zichqec.com/"
	"月波 清火 (Tsukinami Seika)";	"https://tukinami.github.io/"
}

On_sakura.portalsites 
{
	FormatLinks(portalsites_sakura)
}

//These are the websites linked in the second option of the sakura's right click menu. Same as above
portalsites_sakura : array
{
	"Wiki page";		"https://ukagakadreamteam.com/wiki/ghost/zanas_laws"
	//"Write a review!";	"TODO"
}